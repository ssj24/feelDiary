'use strict';

var preact = require('preact');
var preactCompat = require('preact/compat');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var preact__namespace = /*#__PURE__*/_interopNamespace(preact);
var preactCompat__namespace = /*#__PURE__*/_interopNamespace(preactCompat);

let globalObj = typeof globalThis !== 'undefined' ? globalThis : window; // // TODO: streamline when killing IE11 support
if (globalObj.FullCalendarVDom) {
    console.warn('FullCalendar VDOM already loaded');
}
else {
    globalObj.FullCalendarVDom = {
        Component: preact__namespace.Component,
        createElement: preact__namespace.createElement,
        render: preact__namespace.render,
        createRef: preact__namespace.createRef,
        Fragment: preact__namespace.Fragment,
        createContext,
        createPortal: preactCompat__namespace.createPortal,
        flushSync,
        unmountComponentAtNode,
    };
}
// HACKS...
// TODO: lock version
// TODO: link gh issues
function flushSync(runBeforeFlush) {
    runBeforeFlush();
    let oldDebounceRendering = preact__namespace.options.debounceRendering; // orig
    let callbackQ = [];
    function execCallbackSync(callback) {
        callbackQ.push(callback);
    }
    preact__namespace.options.debounceRendering = execCallbackSync;
    preact__namespace.render(preact__namespace.createElement(FakeComponent, {}), document.createElement('div'));
    while (callbackQ.length) {
        callbackQ.shift()();
    }
    preact__namespace.options.debounceRendering = oldDebounceRendering;
}
class FakeComponent extends preact__namespace.Component {
    render() { return preact__namespace.createElement('div', {}); }
    componentDidMount() { this.setState({}); }
}
function createContext(defaultValue) {
    let ContextType = preact__namespace.createContext(defaultValue);
    let origProvider = ContextType.Provider;
    ContextType.Provider = function () {
        let isNew = !this.getChildContext;
        let children = origProvider.apply(this, arguments); // eslint-disable-line prefer-rest-params
        if (isNew) {
            let subs = [];
            this.shouldComponentUpdate = (_props) => {
                if (this.props.value !== _props.value) {
                    subs.forEach((c) => {
                        c.context = _props.value;
                        c.forceUpdate();
                    });
                }
            };
            this.sub = (c) => {
                subs.push(c);
                let old = c.componentWillUnmount;
                c.componentWillUnmount = () => {
                    subs.splice(subs.indexOf(c), 1);
                    old && old.call(c);
                };
            };
        }
        return children;
    };
    return ContextType;
}
function unmountComponentAtNode(node) {
    preact__namespace.render(null, node);
}
