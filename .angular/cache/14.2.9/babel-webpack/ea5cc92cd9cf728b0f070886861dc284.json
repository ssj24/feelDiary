{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; // import * as AWS from '@aws-sdk/client-s3';\n// import * as AWS from 'aws-sdk/global';\n// import * as S3 from 'aws-sdk/clients/s3';\n// import { S3Client, AbortMultipartUploadCommand } from \"@aws-sdk/client-s3\";\n\nexport let RecordingService = /*#__PURE__*/(() => {\n  class RecordingService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    addRecording(recording) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // return console.log(blobUrl);\n        const blobToFile = new File([recording], 'my-file.webm', {\n          type: 'audio/webm'\n        }); // return console.log(blobToFile);\n\n        const fileData = new DataTransfer();\n        fileData.items.add(blobToFile);\n        console.log(fileData.files[0]); // const data = {\n        //   message: 'stt_analysis',\n        //   client_id: 'client1@test.com',\n        //   couns_id: '1234',\n        //   file: fileData.files,\n        // };\n\n        const data = new FormData();\n        data.append('message', 'stt_analysis');\n        data.append('client_id', 'client1@test.com');\n        data.append('couns_id', '1234');\n        data.append('file', fileData.files[0]); // data.append('file', recording);\n\n        console.log('click');\n        const options = {\n          headers: new HttpHeaders({\n            'MIME-Type': 'audio/webm'\n          })\n        };\n        this.http.post(`https://192.168.31.35/SttAnalysis/`, data).toPromise().then(res => {\n          console.log(res);\n          return res;\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    }\n\n  }\n\n  RecordingService.ɵfac = function RecordingService_Factory(t) {\n    return new (t || RecordingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RecordingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecordingService,\n    factory: RecordingService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecordingService;\n})();","map":null,"metadata":{},"sourceType":"module"}