{"ast":null,"code":"/* eslint-disable max-len */\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { HttpHeaders } from '@angular/common/http';\nimport { Day } from './day.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; // ionic serve -- --proxy-config proxy.conf.json\n\nexport let CalendarCreatorService = /*#__PURE__*/(() => {\n  class CalendarCreatorService {\n    constructor(http) {\n      this.http = http;\n      const date = new Date();\n      this.currentYear = date.getFullYear();\n      this.currentMonthIndex = date.getMonth(); // January == 0\n    }\n\n    getHttpData(month, year) {\n      console.log('calSvc-gethttpdata entered');\n      const nextYear = month === 11 ? year + 1 : year;\n      const nextMonth = month === 11 ? 0 : month + 1;\n      const data = {\n        message: 'MonthDiary',\n        email: 'test@test.com',\n        // StartDate: new Date(year, month, 1).toLocaleDateString(),\n        // EndDate: new Date(nextYear, nextMonth, 0).toLocaleDateString(),\n        // StartDate: '2022-10-01',\n        // EndDate: '2022-10-31',\n        StartDate: this.getDateFormatted(new Date(year, month, 1)),\n        EndDate: this.getDateFormatted(new Date(nextYear, nextMonth, 0))\n      };\n      return this.http.post(`/api/MonthDiary/`, data, {\n        headers: new HttpHeaders().set('Content-Type', 'application/json')\n      }); // .pipe(\n      //   map(res => {\n      //     console.log(res);\n      //     return res;\n      //   }),\n      //   tap(res => {\n      //     // this.recipeService.setRecipes(res);\n      //   })\n      // );\n      // .toPromise();\n      // .then((res) => {\n      //   console.log(res);\n      //   for (const i of res) {\n      //     const newDate = new Date(i.date);\n      //     const newDay = {\n      //       date: newDate,\n      //       year: newDate.getFullYear(),\n      //       monthIndex: newDate.getMonth(),\n      //       weekDayNumber: newDate.getDay(),\n      //       dayNumber: newDate.getDate(),\n      //       feelings: i.feelings,\n      //     };\n      //     days.push(newDay);\n      //   }\n      //   return days;\n      // })\n      // .catch(err => {\n      //   console.log(err);\n      // });\n    }\n\n    getData(month = this.currentMonthIndex, year = this.currentYear) {\n      console.log('getdata entered');\n      const monthData = [];\n      this.getHttpData(month, year).subscribe(res => {\n        console.log(res);\n        console.log('getdata', month, year, res);\n\n        for (const i of res) {\n          const newDate = new Date(i.date);\n          const newDay = {\n            date: newDate,\n            year: newDate.getFullYear(),\n            monthIndex: newDate.getMonth(),\n            weekDayNumber: newDate.getDay(),\n            dayNumber: newDate.getDate(),\n            feelings: JSON.parse(i.feelings.replace(/'/g, '\"'))\n          };\n          monthData.push(newDay);\n        }\n\n        console.log('getDatabottom', monthData);\n      });\n      console.log('getData return');\n      return monthData;\n    }\n\n    getCurrentMonth(month = this.currentMonthIndex, year = this.currentYear) {\n      const data = this.getMonth(month, year);\n      const sampleRes = [{\n        email: 'test@test.com',\n        date: '2022-10-31T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-01T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-02T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-03T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-04T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-05T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-06T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-07T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-08T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-09T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-10T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-11T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-12T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-13T07:06:13.029000Z',\n        feelings: ['happy', 'soso', 'good']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-14T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-15T07:06:13.029000Z',\n        feelings: ['not_good', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-16T07:06:13.029000Z',\n        feelings: ['none', 'surprise', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-17T07:06:13.029000Z',\n        feelings: ['none', 'none', 'upset']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-18T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-19T07:06:13.029000Z',\n        feelings: ['none', 'soso', 'uneasy']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-20T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-21T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-22T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-23T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-24T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-25T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-26T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-27T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-28T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-29T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-11-30T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-12-01T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-12-02T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-12-03T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }, {\n        email: 'test@test.com',\n        date: '2022-12-04T07:06:13.029000Z',\n        feelings: ['none', 'none', 'none']\n      }]; // console.log(days);\n\n      return data;\n    }\n\n    getMonth(monthIndex = this.currentMonthIndex, year = this.currentYear) {\n      const days = [];\n      const firstday = this.createDay(year, monthIndex, 1);\n      const prevYear = monthIndex === 0 ? year - 1 : year;\n      const prevMonth = monthIndex === 0 ? 11 : monthIndex - 1;\n      const nextYear = monthIndex === 11 ? year + 1 : year;\n      const nextMonth = monthIndex === 11 ? 0 : monthIndex + 1;\n      let prevLastday = new Date(year, monthIndex, 0).getDate();\n      const countDaysInMonth = new Date(year, monthIndex + 1, 0).getDate(); // if it's monthIndex, we can get days of prvious month\n\n      for (let i = 1; i < firstday.weekDayNumber; i++) {\n        // i start from 1 because week's first day is monday(0 => start from sunday)\n        const newDay = new Day();\n        newDay.date = new Date(prevYear, prevMonth, prevLastday);\n        newDay.year = prevYear;\n        newDay.monthIndex = prevMonth;\n        newDay.weekDayNumber = i;\n        newDay.dayNumber = prevLastday;\n        newDay.feelings = ['none', 'none', 'none'];\n        days.unshift(newDay);\n        prevLastday--;\n      }\n\n      days.push(firstday);\n\n      for (let i = 2; i <= countDaysInMonth; i++) {\n        // since firstday is occupied, it starts from 2\n        days.push(this.createDay(year, monthIndex, i));\n      }\n\n      let curDay = 1;\n\n      for (let i = days[days.length - 1].weekDayNumber + 1; i <= 7; i++) {\n        const newDay = new Day();\n\n        if (i === 7) {\n          newDay.date = new Date(nextYear, nextMonth, days[days.length - 1].dayNumber + 1);\n          newDay.year = nextYear;\n          newDay.monthIndex = nextMonth;\n          newDay.weekDayNumber = 0;\n          newDay.dayNumber = curDay;\n          newDay.feelings = ['none', 'none', 'none'];\n        } else {\n          newDay.date = new Date(nextYear, nextMonth, curDay);\n          newDay.year = nextYear;\n          newDay.monthIndex = nextMonth;\n          newDay.weekDayNumber = i;\n          newDay.dayNumber = curDay;\n          newDay.feelings = ['none', 'none', 'none'];\n          curDay++;\n        }\n\n        days.push(newDay);\n      }\n\n      console.log('getmonth', days);\n      return days;\n    }\n\n    getMonthName(monthIndex) {\n      switch (monthIndex + 1) {\n        case 1:\n          return '1';\n\n        case 2:\n          return '2';\n\n        case 3:\n          return '3';\n\n        case 4:\n          return '4';\n\n        case 5:\n          return '5';\n\n        case 6:\n          return '6';\n\n        case 7:\n          return '7';\n\n        case 8:\n          return '8';\n\n        case 9:\n          return '9';\n\n        case 10:\n          return '10';\n\n        case 11:\n          return '11';\n\n        case 12:\n          return '12';\n\n        default:\n          return '|' + monthIndex;\n      }\n    }\n\n    getWeekDayName(weekDay) {\n      switch (weekDay) {\n        case 0:\n          return 'Sun';\n        // Sunday\n\n        case 1:\n          return 'Mon';\n        // Monday\n\n        case 2:\n          return 'Tue';\n        // Tuesday\n\n        case 3:\n          return 'Wed';\n        // Wednesday\n\n        case 4:\n          return 'Thu';\n        // Thursday\n\n        case 5:\n          return 'Fri';\n        // Friday\n\n        case 6:\n          return 'Sat';\n        // Saturday\n\n        default:\n          return '';\n      }\n    }\n\n    setData(target, data) {\n      if (target) {\n        // target이랑 data랑 맞는지 검증\n        target.feelings = data;\n      }\n    }\n\n    getDateFormatted(date) {\n      const year = date.getFullYear();\n      const month = ('0' + (1 + date.getMonth())).slice(-2);\n      const day = ('0' + date.getDate()).slice(-2);\n      return `${year}-${month}-${day}`;\n    }\n\n    createDay(year, monthIndex, dayNumber) {\n      const day = new Day();\n      day.date = new Date(year, monthIndex, dayNumber);\n      day.year = year;\n      day.monthIndex = monthIndex;\n      day.weekDayNumber = day.date.getDay() === 0 ? 7 : day.date.getDay();\n      day.dayNumber = dayNumber;\n      day.feelings = ['none', 'none', 'none'];\n      day.summary = '';\n      day.diary = [];\n      day.keywords = [];\n      day.recording = {};\n      return day;\n    }\n\n  }\n\n  CalendarCreatorService.ɵfac = function CalendarCreatorService_Factory(t) {\n    return new (t || CalendarCreatorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CalendarCreatorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CalendarCreatorService,\n    factory: CalendarCreatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return CalendarCreatorService;\n})();","map":null,"metadata":{},"sourceType":"module"}