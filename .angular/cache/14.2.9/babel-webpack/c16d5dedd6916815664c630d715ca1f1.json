{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { CreateJournalComponent } from './tab2/mine/create-journal/create-journal.component';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"./calendarCreator.service\";\nimport * as i3 from \"@angular/common/http\";\nexport let JournalCreatorService = /*#__PURE__*/(() => {\n  class JournalCreatorService {\n    constructor(modalCtrl, toastCtrl, calService, http) {\n      this.modalCtrl = modalCtrl;\n      this.toastCtrl = toastCtrl;\n      this.calService = calService;\n      this.http = http;\n      this._imgList = ['happy', 'soso', 'good', 'excite', 'great', 'uneasy', 'sad', 'not_good', 'lonely', 'depressed', 'surprise', 'upset', 'unpleasant', 'idk', 'empty'];\n      this._feelings = ['즐거워', '그냥 그래', '좋아!', '설레', '행복해', '불안해', '슬퍼', '별로야', '외로워', '우울해', '놀랐어', '화났어', '불쾌해', '모르겠어', '비워둘래'];\n      this._today = new Date();\n      this.journalData = new Subject(); // eslint-disable-next-line @typescript-eslint/member-ordering\n\n      this.getJournalData$ = this.journalData.asObservable();\n    }\n\n    get getImgList() {\n      return this._imgList;\n    }\n\n    get getFeelings() {\n      return this._feelings;\n    }\n\n    get getToday() {\n      return {\n        date: this._today,\n        year: this._today.getFullYear(),\n        monthIndex: this._today.getMonth(),\n        weekDayNumber: 0,\n        dayNumber: this._today.getDate(),\n        // 이미 오늘 일기가 있으면 그걸 가져와야 되지 않을까?\n        feelings: ['none', 'none', 'none'],\n        summary: '',\n        diary: [{\n          time: 0,\n          sentence: 'aaa'\n        }],\n        keywords: [],\n        recording: {}\n      };\n    } // public createJournal(day: Day = this.getToday) {\n    //   this.modalCtrl.create({\n    //               component: CreateJournalComponent,\n    //               componentProps: {day},\n    //               cssClass: 'diaryModal',\n    //             }).then (modalEl => {\n    //               modalEl.present();\n    //               return modalEl.onDidDismiss();\n    //             }).then(result => {\n    //               if (result.role === 'confirm') {\n    //                 this.journalData.next(result.data);\n    //                 const finalData = {\n    //                   message: 'DiarySave',\n    //                   id_mail: 'test@test.com',\n    //                   feelings: result.data.feelings,\n    //                   summary: result.data.summary,\n    //                   diary: result.data.diary,\n    //                   keywords: result.data.keywords\n    //                 };\n    //                 console.log('finalData feelings', finalData.feelings);\n    // }});\n    // }\n\n\n    getFeelingName(img) {\n      if (img === 'none') {\n        return '비워둘래';\n      }\n\n      for (let i = 0; i < this._imgList.length; i++) {\n        if (this._imgList[i] === img.slice(1, img.length)) {\n          return this._feelings[i];\n        }\n      }\n    }\n\n    createJournal(day = this.getToday) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const data = {\n          message: 'DayDiary',\n          id_mail: 'test@test.com',\n          date: this.calService.getDateFormatted(day.date) // date: `${day.year}-${day.monthIndex < 9 ? '0'+String(day.monthIndex+1) : day.monthIndex+1}-${day.dayNumber < 10 ? '0'+String(day.dayNumber) : day.dayNumber}`\n\n        };\n        yield this.http.post(`/api/DayDiary/`, data, {\n          headers: new HttpHeaders().set('Content-Type', 'application/json')\n        }).toPromise().then(res => {\n          console.log('createJournal-1', res);\n\n          if (res !== 'DataNotExist') {\n            day.feelings = JSON.parse(res.feelings.replace(/'/g, '\"'));\n            day.summary = res.summary;\n            day.diary = JSON.parse(res.diary.replace(/'/g, '\"'));\n            day.keywords = JSON.parse(res.keywords.replace(/'/g, '\"'));\n          } else {\n            day.summary = '';\n            day.diary = [];\n            day.keywords = [];\n          }\n\n          this.modalCtrl.create({\n            component: CreateJournalComponent,\n            componentProps: {\n              day\n            },\n            cssClass: 'diaryModal'\n          }).then(modalEl => {\n            modalEl.present();\n            return modalEl.onDidDismiss();\n          }).then(result => {\n            if (result.role === 'confirm') {\n              this.journalData.next(result.data);\n              const finalData = {\n                message: 'DiarySave',\n                id_mail: 'test@test.com',\n                date: this.calService.getDateFormatted(result.data.date),\n                feelings: result.data.feelings,\n                summary: result.data.summary,\n                diary: result.data.diary,\n                keywords: result.data.keywords\n              };\n              console.log(finalData);\n              console.log('finalData feelings', finalData.feelings);\n              this.http.post(`/api/DiarySave/`, finalData, {\n                headers: new HttpHeaders().set('Content-Type', 'application/json')\n              }).toPromise().then(response => {\n                console.log('createJournal-2', response);\n                this.presentToast('감정 적립', day);\n                this.calService.getCurrentMonth(this.getToday.monthIndex, this.getToday.year);\n              }).catch(err => {\n                this.presentToast('감정 적립 실패');\n                console.log(err);\n              });\n            } else {\n              console.log(result);\n            }\n          });\n        }).catch(err => {\n          console.log(err);\n          this.modalCtrl.create({\n            component: CreateJournalComponent,\n            componentProps: {\n              day\n            },\n            cssClass: 'diaryModal'\n          }).then(modalEl => {\n            modalEl.present();\n            return modalEl.onDidDismiss();\n          }).then(result => {\n            console.log(result);\n          });\n        });\n      });\n    }\n\n    presentToast(msg, day) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const dayStr = day ? `${day.year}년 ${day.monthIndex + 1}월 ${day.dayNumber}일의` : '';\n        const toast = yield this.toastCtrl.create({\n          message: `\n      <p class=\"ion-text-center\">\n      ${dayStr}\n      ${msg}\n      </p>\n      `,\n          duration: 2000,\n          cssClass: 'journalToast'\n        });\n        yield toast.present();\n        const {\n          role\n        } = yield toast.onDidDismiss(); // this.roleMessage = `Dismissed with role: ${role}`;\n      });\n    }\n\n  }\n\n  JournalCreatorService.ɵfac = function JournalCreatorService_Factory(t) {\n    return new (t || JournalCreatorService)(i0.ɵɵinject(i1.ModalController), i0.ɵɵinject(i1.ToastController), i0.ɵɵinject(i2.CalendarCreatorService), i0.ɵɵinject(i3.HttpClient));\n  };\n\n  JournalCreatorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JournalCreatorService,\n    factory: JournalCreatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return JournalCreatorService;\n})();","map":null,"metadata":{},"sourceType":"module"}